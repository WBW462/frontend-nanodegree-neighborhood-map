function viewThing() {
    var a = document.getElementById("map"), b = {
        mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    map = new google.maps.Map(a, b);
    var c = new google.maps.LatLngBounds();
    for (menu = menuSetup(), i = 0; i < markers.length; i++) LinkMarkerToContent(markers[i].markerItem, markers[i].contentWindow, markers[i].wikiUrl), 
    markers[i].markerItem.setMap(map), google.maps.event.addListener(markers[i].markerItem, "click", toggleBounce), 
    c.extend(markers[i].markerItem.position);
    map.fitBounds(c);
}

function menuSetup() {
    var a = document.getElementById("menu");
    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(a), a.addEventListener("click", function(a) {
        c.venueList.toggle("open"), a.stopPropagation();
    });
    var b = document.querySelector("#map"), c = document.querySelector("#drawer"), d = document.querySelector("#exit");
    b.addEventListener("click", function() {
        c.venueList.remove("open"), a.venueList.remove("open");
    }), d.addEventListener("click", function() {
        c.venueList.remove("open");
    });
}

function LinkMarkerToContent(a, b, c) {
    var d = b, e = new google.maps.InfoWindow({
        content: d
    });
    a.addListener("click", function() {
        e.opened === !1 ? e.close() : (getWikiArticles(c, e, d), e.open(a.get("map"), a), 
        e.opened = !0, setTimeout(function() {
            e.close();
        }, 5e3));
    });
}

function toggleBounce(a) {
    var b = this;
    null !== b.getAnimation() ? b.setAnimation(null) : (b.setAnimation(google.maps.Animation.BOUNCE), 
    b.setIcon("http://maps.google.com/mapfiles/kml/paddle/grn-stars.png"), setTimeout(function() {
        b.setAnimation(null);
    }, 5e3), setTimeout(function() {
        b.setIcon(null);
    }, 14e3));
}

function initMap() {
    var a = new controler();
    ko.applyBindings(a), google.maps.event.addDomListener(window, "load", function() {
        viewThing();
    });
}

function errorHandling() {
    console.log("there was an error in the google load"), $("#map").append("Error in google map load");
}

function getWikiArticles(a, b, c) {
    $.ajax({
        url: a,
        dataType: "jsonp",
        timeout: 8e3
    }).done(function(a) {
        var d = a[0];
        console.log(d);
        var e = "http://en.wikipedia.org/wiki/" + d;
        b.setContent(c + '<p><a href="' + e + '"  "">Wikipedia Link to ' + d + "</a>");
    }).error(function(a) {
        alert("failed to get wikipedia resources");
    });
}

var markers = [], nbrMarkers, map, Loc = function(a) {
    "use strict";
    this.location = a.location, this.lat = a.lat, this.lng = a.lng, this.address = a.address, 
    this.visible = ko.observable(a.visible), this.wikiUrl = "http://en.wikipedia.org/w/api.php?action=opensearch&search=" + a.location + "&format=json&callback=wikiCallback", 
    this.contentWindow = a.location + '<br><img src="https://maps.googleapis.com/maps/api/streetview?size=300x250&location=' + a.address + "' AIzaSyDduns82K5FZBrB7jp8OuqMZdyEMlFvEg8\">'", 
    this.markerItem = new google.maps.Marker({
        position: {
            lat: a.lat,
            lng: a.lng
        },
        title: a.location,
        animation: google.maps.Animation.DROP,
        visible: a.visible
    });
}, controler = function() {
    var a = this;
    this.chosenMarker = ko.observable(), this.koMarkerArray = ko.observableArray([]), 
    venues.forEach(function(b) {
        a.koMarkerArray.push(new Loc(b)), markers.push(new Loc(b));
    }), nbrMarkers = markers.length, this.filter = ko.observable(""), this.goToMarker = function(b) {
        var c = window.matchMedia("(min-width: 600px)");
        for (c.matches || drawer.venueList.remove("open"), a.chosenMarker(b.location), i = 0; i < nbrMarkers; i++) b.location == markers[i].markerItem.title && google.maps.event.trigger(markers[i].markerItem, "click");
    }, this.filteredItems = ko.computed(function() {
        var a = this.filter().toLowerCase();
        if (a) return ko.utils.arrayFilter(this.koMarkerArray(), function(b) {
            var c = b.location.toLowerCase();
            for (i = 0; i < nbrMarkers; i++) {
                var d = markers[i].markerItem.title.toLowerCase();
                d.search(a) >= 0 ? markers[i].markerItem.setVisible(!0) : markers[i].markerItem.setVisible(!1);
            }
            return c.search(a) >= 0;
        });
        for (i = 0; i < nbrMarkers; i++) markers[i].markerItem.setVisible(!0);
        return this.koMarkerArray();
    }, this);
};